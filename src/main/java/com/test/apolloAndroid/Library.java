package com.test.apolloAndroid;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.UUID;

import javax.annotation.Nonnull;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apollographql.apollo.ApolloCall;
import com.apollographql.apollo.ApolloClient;
import com.apollographql.apollo.ApolloSubscriptionCall;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.exception.ApolloException;
import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;
import com.apollographql.apollo.rx2.Rx2Apollo;
import com.test.client.Connection;
import com.test.FindOfficeByIdQuery;
import com.test.FindSensorByIdQuery;
import com.test.FindSnapshotChanges2Subscription;
import com.test.RegisterMutation;

import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.schedulers.Schedulers;
import io.reactivex.subscribers.DisposableSubscriber;

/**
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * Rest Endpoints
 */
@RestController
public class Library {
    protected final Log logger = LogFactory.getLog(getClass());

    @Autowired
    private ApolloClient apolloClient;

    ApolloCall<FindSensorByIdQuery.Data> sensorCall;
    ApolloCall<FindOfficeByIdQuery.Data> officeCall;
    ApolloCall<RegisterMutation.Data> registerCall;
    ApolloSubscriptionCall<FindSnapshotChanges2Subscription.Data> subscriptionCall;
    
    private final CompositeDisposable disposables = new CompositeDisposable();

    /**
     * Query tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testSensor")
    public boolean someLibraryMethod() {

        FindSensorByIdQuery query = FindSensorByIdQuery.builder()
            .id(UUID.fromString("1fadb472-ccf8-44cf-83f1-87a9c661a78b"))
            .build();
        System.out.println("client: " + apolloClient);
        sensorCall = apolloClient
            .query(query);

        sensorCall.enqueue(new ApolloCall.Callback<FindSensorByIdQuery.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<FindSensorByIdQuery.Data> response
            ) {
                FindSensorByIdQuery.Data data = response.data();
                System.out.println("DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println("ERROR: " + e);
            }
        });

        return true;
    }

    /**
     * Mutation tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testRegister")
    public boolean testRegister() {

        RegisterMutation mutation = RegisterMutation.builder()
            .build();
        registerCall = apolloClient
            .mutate(mutation);
        
        registerCall.enqueue(new ApolloCall.Callback<RegisterMutation.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<RegisterMutation.Data> response
            ) {
                RegisterMutation.Data data = response.data();
                System.out.println(" REG DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println(" REG ERROR: " + e);
            }
        });

        return true;
    }

    String responseString = "";
    Boolean connected = false;

    /**
     * Subscription tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testSubscription")
    public String testSubscription() {

        FindSnapshotChanges2Subscription subscription = FindSnapshotChanges2Subscription.builder()
            .id(UUID.fromString("855891ef-f2ff-47f6-adcc-64ba1917d585"))
            .build();
        subscriptionCall = apolloClient
            .subscribe(subscription);

        disposablesAdd(subscriptionCall);
        
        
        return responseString;
    }
    
    
    
    public void disposablesAdd(ApolloSubscriptionCall<FindSnapshotChanges2Subscription.Data> subscriptionCall) {

    	connected = true;
    	
        disposables.add(Rx2Apollo.from(subscriptionCall)
            .subscribeOn(Schedulers.io())
//            .observeOn(AndroidSchedulers.mainThread())
            .subscribeWith(
                new DisposableSubscriber<Response<FindSnapshotChanges2Subscription.Data>>() {
                  @Override public void onNext(Response<FindSnapshotChanges2Subscription.Data> response) {
                	  logger.info("RESPONSE SUBS TIME: " + response.data());
                	  responseString = response.data().toString();
//                    commentsListViewAdapter.addItem(response.data().commentAdded().content());
//                    Toast.makeText(GitHuntEntryDetailActivity.this, "Subscription response received", Toast.LENGTH_SHORT)
//                        .show();
                  }

                  @Override public void onError(Throwable e) {
                	  System.out.println("Subscription failure: " + e);
                	  e.printStackTrace();
                	  if (e instanceof ApolloSubscriptionTerminatedException) {
                		  logger.info("**** Unsubsribing... ");
//                		  disposablesAdd(subscriptionCall.clone());
                		  
                		  
                	  }
                	  connected = false;
                  }

                  @Override public void onComplete() {
                	  System.out.println("Subscription exhausted");
                  }
                }
            )
        );

    }

    @Scheduled(fixedDelay = 1000 * 30)
    public void initConecction() {
    	

    	try {
    		System.out.println("Internet? " + !"127.0.0.1".equals(InetAddress.getLocalHost().getHostAddress().toString()));
		} catch (UnknownHostException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
    	
    	logger.info("**** initConnection");
    	if (!connected && subscriptionCall != null) {
        	logger.info("**** initConnection: NOT Connected. cloning!!");
    	    disposablesAdd(subscriptionCall.clone());
    	} else {
    		logger.info("**** initConnection: Connected! --");
    	}
    }
    

    @Autowired
    private Connection connection;


    /**
     * login
     * 
     * @return Boolean
     */
    @GetMapping(value = "login")
    public boolean login() {

        connection.login();

        if (connection.getCookies() != null && connection.getToken() != null) {
            // LOGGED IN

            logger.info(" LOGGEDIN ");
//            connection.logout();
        }

        return true;
    }

    /**
     * logout
     * 
     * @return Boolean
     */
    @GetMapping(value = "logout")
    public boolean logout() {
    	connection.logout();
        logger.info(" LOGGEDOUT");


        return true;
    }
}
