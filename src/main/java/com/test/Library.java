package com.test;

import java.util.UUID;

import javax.annotation.Nonnull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apollographql.apollo.ApolloCall;
import com.apollographql.apollo.ApolloClient;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.exception.ApolloException;
import com.test.FindSensorByIdQuery;

/**
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * Rest Endpoints
 */
@RestController
public class Library {

    @Autowired
    private ApolloClient apolloClient;

    ApolloCall<FindSensorByIdQuery.Data> sensorCall;
    ApolloCall<RegisterMutation.Data> registerCall;

    /**
     * Query tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testSensor")
    public boolean someLibraryMethod() {

        FindSensorByIdQuery query = FindSensorByIdQuery.builder()
            .id(UUID.fromString("1fadb472-ccf8-44cf-83f1-87a9c661a78b"))
            .build();
        System.out.println("client: " + apolloClient);
        sensorCall = apolloClient
            .query(query);
        
        sensorCall.enqueue(new ApolloCall.Callback<FindSensorByIdQuery.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<FindSensorByIdQuery.Data> response
            ) {
                FindSensorByIdQuery.Data data = response.data();
                System.out.println("DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println("ERROR: " + e);
            }
        });

        return true;
    }

    /**
     * Mutation tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testRegister")
    public boolean testRegister() {

        RegisterMutation mutation = RegisterMutation.builder()
            .build();
        registerCall = apolloClient
            .mutate(mutation);
        
        registerCall.enqueue(new ApolloCall.Callback<RegisterMutation.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<RegisterMutation.Data> response
            ) {
                RegisterMutation.Data data = response.data();
                System.out.println(" REG DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println(" REG ERROR: " + e);
            }
        });

        return true;
    }
}
