package com.test;

import java.util.UUID;

import javax.annotation.Nonnull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apollographql.apollo.ApolloCall;
import com.apollographql.apollo.ApolloClient;
import com.apollographql.apollo.ApolloSubscriptionCall;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.exception.ApolloException;
import com.apollographql.apollo.rx2.Rx2Apollo;
import com.test.FindSensorByIdQuery;

import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.schedulers.Schedulers;
import io.reactivex.subscribers.DisposableSubscriber;

/**
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * Rest Endpoints
 */
@RestController
public class Library {

    @Autowired
    private ApolloClient apolloClient;

    ApolloCall<FindSensorByIdQuery.Data> sensorCall;
    ApolloCall<FindOfficeByIdQuery.Data> officeCall;
    ApolloCall<RegisterMutation.Data> registerCall;
    ApolloSubscriptionCall<FindSnapshotChanges2Subscription.Data> subscriptionCall;
    
    private final CompositeDisposable disposables = new CompositeDisposable();

    /**
     * Query tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testSensor")
    public boolean someLibraryMethod() {

        FindSensorByIdQuery query = FindSensorByIdQuery.builder()
            .id(UUID.fromString("1fadb472-ccf8-44cf-83f1-87a9c661a78b"))
            .build();
        System.out.println("client: " + apolloClient);
        sensorCall = apolloClient
            .query(query);

        sensorCall.enqueue(new ApolloCall.Callback<FindSensorByIdQuery.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<FindSensorByIdQuery.Data> response
            ) {
                FindSensorByIdQuery.Data data = response.data();
                System.out.println("DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println("ERROR: " + e);
            }
        });

        return true;
    }

    /**
     * Mutation tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testRegister")
    public boolean testRegister() {

        RegisterMutation mutation = RegisterMutation.builder()
            .build();
        registerCall = apolloClient
            .mutate(mutation);
        
        registerCall.enqueue(new ApolloCall.Callback<RegisterMutation.Data>() {
            @Override
            public void onResponse(
                @Nonnull
                Response<RegisterMutation.Data> response
            ) {
                RegisterMutation.Data data = response.data();
                System.out.println(" REG DATA: " + data);
            }

            @Override
            public void onFailure(
                @Nonnull
                ApolloException e
            ) {
                System.out.println(" REG ERROR: " + e);
            }
        });

        return true;
    }

    /**
     * Mutation tester method
     * 
     * @return Boolean
     */
    @GetMapping(value = "testSubscription")
    public boolean testSubscription() {

        FindSnapshotChanges2Subscription subscription = FindSnapshotChanges2Subscription.builder()
            .id(UUID.fromString("855891ef-f2ff-47f6-adcc-64ba1917d585"))
            .build();
        subscriptionCall = apolloClient
            .subscribe(subscription);

        disposables.add(Rx2Apollo.from(subscriptionCall)
            .subscribeOn(Schedulers.io())
//            .observeOn(AndroidSchedulers.mainThread())
            .subscribeWith(
                new DisposableSubscriber<Response<FindSnapshotChanges2Subscription.Data>>() {
                  @Override public void onNext(Response<FindSnapshotChanges2Subscription.Data> response) {
                	  System.out.println("RESPONSE SUBS: " + response.data());
//                    commentsListViewAdapter.addItem(response.data().commentAdded().content());
//                    Toast.makeText(GitHuntEntryDetailActivity.this, "Subscription response received", Toast.LENGTH_SHORT)
//                        .show();
                  }

                  @Override public void onError(Throwable e) {
                	  System.out.println("Subscription failure: " + e);
                	  e.printStackTrace();
                  }

                  @Override public void onComplete() {
                	  System.out.println("Subscription exhausted");
                  }
                }
            )
        );

        return true;
    }
}
